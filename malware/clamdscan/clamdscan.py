# DFF -- An Open Source Digital Forensics Framework
# Copyright (C) 2011 ArxSys
# 
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2. See the LICENSE file
# at the top of the source tree.
# 
# See http://www.digital-forensic.org for more information about this
# project. Please do not directly contact any of the maintainers of
# DFF for assistance; the project provides a web site, mailing lists
# and IRC channels for your use.
# 
# Author(s):
#  Solal Jacob <sja@digital-forensic.org>

__dff_module_clamdscan_version__ = "1.0.0"
import sys

import pyclamd

from dff.api.module.script import Script 
from dff.api.module.module import Module
from dff.api.module.manager import ModuleProcessusHandler
from dff.api.types.libtypes import Variant, VMap, Argument, Parameter, typeId, vtime
from dff.api.vfs.libvfs import AttributesHandler, VFS 

class ClamdScanFile():
  def __init__(self, connection_type_ip, host):
     if connection_type_ip == True:
       try :
          host, port = host.split(":")
       except ValueError:
	  port = 3310
       pyclamd.init_network_socket(host, port, timeout=None)
     else:
       pyclamd.init_unix_socket(host)
     
  def scan(self, node):
     if not (node.size() > 0 and node.size() < 30*1024*1024): 
	return None
     try :
       vfile = node.open()
       data = vfile.read()
       ret =  pyclamd.scan_stream(data)
       if ret :
	 return ret["stream"]
     except :
       return None 

class ClamdScanHandler(AttributesHandler, ModuleProcessusHandler):
  def __init__(self):
    AttributesHandler.__init__(self, "clamdscan")
    ModuleProcessusHandler.__init__(self, "clamdscan")
    self.__disown__()
    self.nodeAttributes = {} 
    self.vfs = VFS.Get()

  def setAttributes(self, node, attributes):
     node.setTag("malware")   
     self.nodeAttributes[node.uid()] = attributes

  def nodes(self, root):
     nodes = []
     rootAbsolute = root.absolute()
     for node in self.nodeAttributes.keys():
	node = self.vfs.getNodeById(node)
	if node.absolute().find(rootAbsolute) == 0:
	  nodes.append(node)
     return nodes 

  def update(self, processus):
	pass

  def  attributes(self, node):
    attr = VMap()
    try :
       result = self.nodeAttributes[node.uid()]
       v = Variant(result)	
       attr["malware"] = v
    except KeyError:
	pass
    return attr

class ClamdScan(Script):
  def __init__(self):
   Script.__init__(self, "clamdscan")
   self.handler = ClamdScanHandler() 
   self.scanner = None

  def start(self, args):
    try:
      if not self.scanner:
        try:
  	  host = args['host'].value()
        except IndexError:
          if sys.platform.startswith("win32"):
            host = "127.0.0.1:3310"
          else:
            host = "/var/run/clamav/clamd.ctl"
        if sys.platform.startswith("win32"):
          connection_type_ip = True
        else:
          try:
            connection_type_ip = args["ip connection"].value()
          except IndexError:
            connection_type_ip = False
	self.scanner = ClamdScanFile(connection_type_ip, host)
      node = args['file'].value()
      self.stateinfo = "Registering node: " + str(node.name())
      result = self.scanner.scan(node)
      if result:
        self.handler.setAttributes(node, result)
        node.registerAttributes(self.handler)
    except KeyError:
      pass


class clamdscan(Module):
  """This modules scan executable through a clamav server to find malware."""
  def __init__(self):
    Module.__init__(self, "clamdscan", ClamdScan)
    self.conf.addArgument({"name": "file",
                           "description": "file for extracting metadata",
                           "input": Argument.Required|Argument.Single|typeId.Node})
    self.conf.addArgument({"name": "ip connection",
			   "input": Argument.Empty,
			   "description": "Connect to a distant server rather than a local pipe"}) 
    if sys.platform.startswith("win32"):
      hostparams =  {"type" : Parameter.Editable,
                     "predefined": ["127.0.0.1:3310"]}
    else:
      hostparams =  {"type" : Parameter.Editable, 
                     "predefined": ["/var/run/clamav/clamd.ctl","/var/run/clamav/clamd.pid"]}  
    self.conf.addArgument({"name": "host",
			   "input": Argument.Optional|Argument.Single|typeId.String,
			   "description": "Addresse of local pipe or IP of clamd server (default port 3310) or ip:port ",
			   "parameters": hostparams})
    self.conf.addConstant({"name": "mime-type", 
 	                   "type": typeId.String,
 	                   "description": "managed mime type",
 	                   "values": ["PE32"]})
    self.flags = ["single"]
    self.tags = "Malware"
    self.icon = ":virus"
